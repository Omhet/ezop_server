name_file("Ядро системы","1","1","/****8**************************************************************************************/\n/* Здесь введены системные типы и отношения template2                                        */\n/* (кроме отношений грамматики вычисления выражений действительных чисел), */\n/*  которые должны войти в init                                                                                     */\n/********************************************************************************************/\n\n  предложение,текст,вопрос,команда -области.\n \"текст вопроса\", сообщение, тип   -   области.\n\n  вопрос - это предложение.\n  предложение -это текст.\n  \n \"ввести переменную\" -область.\n   ввести переменную - это команда.\n   \n   boolean - это текст вопроса.\n   ob - это текст вопроса.\n   отображение - это текст вопроса.\n   выражение - это текст вопроса.\n   сообщение - это предложение.\n   ob -это тип.\n")
name_file("Онтология ядра системы","85329563","1","/******************************************************/ \n/* В ЭТОЙ ОНТОЛОГИИ ВВОДЯТСЯ ОСНОВНЫЕ КЛАССЫ, ПРАВИЛА */\n/* И АКСИОМЫ ДЛЯ РАБОТЫ ШАБЛОНОВ ЯДРА СИСТЕМЫ         */\n/******************************************************/.")
name_file("Простейшие примеры определения онтологий с использованием других онтологий","37607466","85329563","/* Эта онтология является средой для раздела онтологий\n\"Простейшие примеры определения онтологий с использованием других онтологий\".\n\nВведение этой среды позволяет отделить (сделать невидимыми по умолчанию) онтологии, \nсозданные в этой среде от онтологий, разработанных в других средах.\n\nВ разделе определены онтологии \"Цвет\", \"Изменение цвета\", \"Изменение цвета тел\".\n \nВ онтологии \"Цвет\" показывается, как можно вводить классы (области), элементы\nклассов и отношения класс-подкласс (область-подобласть).\n\nВ онтологии \"Изменение цвета\" используется онтология \"Цвет\" и показывается, \nкак может быть определено отображение и его значения на элементах.\n\nВ онтологии \"Изменение цвета тел\" используется онтология \"Изменение цвета\", \nвводится новый класс \"тела\" и определяются его элементы. Для тел определено\nсвойство \"цвет\". В построенной онтологи имеются все элементы, определенные \nв использованных онтологиях, удовлетворяющие ввенным там соотношениям. */.")
name_file("Цвет","29377632","37607466","[Цвета] - область.\n\"теплые цвета\" < цвета.\n\"холодные цвета\" < цвета.\n\"Красный\", \"желтый\" - элементы области теплые цвета.\nПусть зеленый,синий, белый - холодные цвета. \n\n/* Примеры вопросов к онтологии:\nЭлементы области цвета?\nЖелтый - цвета?\nОранжевый - цвета?\nХолодные цвета < цвета?\nРавны ли желтый и оранжевый?\n*/.\n\n/****************************************************************************\nЭта онтология разработана в среде онтологии \n\"Простейшие примеры определения онтологий с использованием других онтологий\".\nЕе текст написан с использованием шаблонов языка ядра.\nВ конце предложений ставится точка.\n\nПервое предложение вводит в онтологию новую область (класс) \"Цвета\".\nКвадратные скобки и кавычки используются для обозначения новых терминов, \nвводимых в онтологии.\nВ следующих двух предложениях вводятся подклассы \"холодные цвета\" и \n\"теплые цвета\" класса \"цвета\". Элементы этих классов вводятся в следующих \nпредложениях с помощью двух разных шаблонов.\nКомментарии в тексте онтологии выделяются скобками вида /* ... */.\nВ комментариях здесь указываются примеры вопросов к онтологии, которые могут \nиспользоваться для ее проверки.\n*****************************************************************************/.")
name_file("Изменение цвета","85741444","37607466","Используем понятие [цвет].\n[измененный] - отображение.\nИзмененный : Цвета -> Цвета.\nИзмененный (красный) = синий.\nИзмененный (синий) = зеленый.\nИзмененный (зеленый) = зеленый.\n\n/* Примеры вопросов к онтологии:\nЭлементы области цвета?\nЧему равно измененный(синий)?\nЧему равно измененный(желтый)?\nЖелтый - цвет?\n*/.\n\n/************************************************************************************\nЭта онтология разрабатывается в среде \n\"Простейшие примеры определения онтологий с использованием других онтологий\" \nс использованием шаблонов ядра.\n\nВ первом предложении в разрабатываемую онтологию загружается уже созданная \nонтология \"Цвет\".\nВ следующих предложениях вводится новое отображение из класса \"цвета\" в этот же \nкласс и определяются значения введенного отображения на элементах с помощью равенств.\n**************************************************************************************/.")
name_file("Изменение цвета тел","29742761","37607466","\"тела\" - область.\nПусть [куб], [пирамида],[шар] - тела.\nИспользуем понятие [изменение цвета].\n[цвет] - отображение.\nцвет: тела -> Цвета.\nцвет(куб) = красный.\nцвет(пирамида) = синий.\nцвет(шар) = красный.\n\n/* Примеры вопросов к онтологии:\n\nЭлементы области цвета?\nЧему равно измененный(цвет(шар))?\nЦвет(пирамида)==измененный(цвет(шар))?\nРавны ли цвет(пирамида) и измененный(цвет(шар))?\nРавны ли цвет(куб) и измененный(цвет(шар))?\nРавны ли измененный(цвет(пирамида)) и\nизмененный(измененный(цвет(шар)))?\n*/.\n\n/******************************************************************************\nВ первых двух предложениях вводится класс \"тела\" и некоторые его элементы.\nДалее, в определяемую онтологию вводится онтология \"изменение цвета\", \nвводится функция, задающая для каждого тела его цвет, и равенствами \nсвязываются элементы, введенные в текущей онтологии и в предыдущих онтологиях.\n*******************************************************************************/.")
name_file("Примеры таксономий","99031673","85329563","/* Эта онтология является средой для онтологий,\nвходящих в раздел \"Примеры онтологий\".\nТаксономии являются простейщими, но распространенными примерами онтологий.\n\nВ данном разделе показываются языковые возможности ядра системы по созданию \nклассов, подклассов, свойств классов, а также элементов классов. */.")
name_file("Пример мира","12749377","99031673","/* ПРИМЕР ОПИСАНИЯ МИРА */\n[ТЕЛА],[ОДУШЕВЛЕННЫЕ ТЕЛА],[НЕОДУШЕВЛЕННЫЕ ТЕЛА],\n[ПРЕДМЕТЫ], [ЖИВОТНЫЕ],[РЫБЫ],[ЛЮДИ],[МУЖЧИНЫ],[ЖЕНЩИНЫ] - области.\nОДУШЕВЛЕННЫЕ ТЕЛА - подобласть области ТЕЛА.\nНЕОДУШЕВЛЕННЫЕ ТЕЛА - подобласть области ТЕЛА.\nПРЕДМЕТЫ < НЕОДУШЕВЛЕННЫЕ ТЕЛА.\n\nЖИВОТНЫЕ < ОДУШЕВЛЕННЫЕ ТЕЛА.\nРЫБЫ < ЖИВОТНЫЕ.\nЛЮДИ < ЖИВОТНЫЕ.\n\nМУЖЧИНЫ - подобласть области ЛЮДИ.\nЖЕНЩИНЫ - подобласть области ЛЮДИ.\n[Петя], [Коля] - элементы области МУЖЧИНЫ.\n\nстул, стол - элементы области ПРЕДМЕТЫ.\n\n\n/* Пример вопроса: \n\nЭлементы области одушевленные тела?\n\n*/.")
name_file("Классификация людей учебного процесса","96695630","99031673","/* Пример взят из книги Цаленко \"Моделирование семантики в базах данных\" */\n\n[люди] - область.\n\nСвойства люди :\nфамилия,\n[год рождения],\nпол.\n\nПодобласти люди:\nсотрудник,\nучащийся.\n\nСвойства сотрудник :\nфакультет,\n[год поступления на работу],\nоклад.\n\nПодобласти сотрудник:\nпреподаватель,\n[административный персонал],\n[обслуживающий персонал].\n\nПодобласти преподаватель:\n[заведующий кафедрой],\nпрофессор,\nдоцент,\nассистент.\n\nПодобласти административный персонал:\n[заведующий лабораторией],\nинспектор,\nдекан.\n\nПодобласти обслуживающий персонал:\nлаборант,\nтехник.\n\nСвойства учащийся :\nфакультет,\n\"год поступления\".\n\nПодобласти учащийся:\nстудент,\nаспирант.\n\n/* Примеры вопросов к онтологии:\n\nПодобласти области сотрудник?\nМаксимальные подобласти люди?\nСвойства преподаватель?\n*/.\n\n/************************************************************************************************\nВ этом примере вводятся не только классы, но и наборы их свойств.\n\nАналогично могут быть описаны онтологии-таксономии \"Классификация оборудования учебного процесса\" \nи \"Классификация помещений учебного процесса\". Причем каждая классификация делается специалистом \nв этой области.\n\nЭти онтологии-таксономии могут использоваться при построении онтологии, описывающей конкретный \nучебный процесс конкретного ВУЗа в определенный момент времени. В такой онтологии загружаются \nнеобходимые таксономии и определяются элементы классов с указанием для них значений требуемых \nсвойст. В результате получится онтология, описывающая состояние некоторого учебного процесса. \nК этой онтологии можно обращаться с вопросами, построенными из шаблонов языка вопросов, \nописанных в ядре системы, а система строит ответы на запросы к онтологии даннного учебного \nпроцесса в данном состоянии. \n\nШаблоны языка запросов, описанные в ядре, к онтологиям-таксономиям должен быть SQL-подобным, \nи в идеале соответствовать принятым стандартам, например SPARQL.\n***************************************************************************************************/.")
name_file("Примеры онтологий равномерного движения","20245755","85329563","/* Эта онтология является средой для онтологий раздела \n\"Примеры онтологий задач на равномерное движение\".\n\nВ разделе вводится онтология \"Равномерное движение\",\nкоторая используется в задачах на равномерное движение\nнескольких тел. \nВ онтологии \"Равномерное движение\" приводится примеры определения\nвнешних шаблонов, с помощью которых эта онтология может быть \nиспользована в других онтологиях.\nВ примерах онтологий задач показаны как используются возможности \nоткрытости языка ядра системы и показываются некоторые возможности\nвычислений в онтологиях. */.")
name_file("Равномерное движение","35825708","20245755","Путь, скорость, время: real.\n\nПуть= скорость*время.\nВремя= путь/скорость.\nСкорость= путь/время.\n\nВведем шаблон \"@Тело движется равномерно\"\nс переменными: \"Тело: new\"\nи переменной результата \" x: команда \" ;\nПояснения: [Вводится объект @Тело, движущийся равномерно]\nУсловие применения шаблона:\n[]\nДействие шаблона:\n[x=пустая команда;\nтело - объект понятия \"равномерное движение\". ]\nТип доступа шаблона:[внешний].\n\nВведем шаблон \"@Тело равномерно движется со скоростью @V\"\nс переменными: \"Тело: new; V: real_выражение\"\nи переменной результата \" x: команда \" ;\nПояснения: [Вводится объект @Тело, равномерно движущийся \\ \\n со скоростью @V ]\nУсловие применения шаблона:\n[]\nДействие шаблона:\n[x=пустая команда;\nтело - объект понятия \"равномерное движение\";\nтело's скорость =V. ]\nТип доступа шаблона:[внешний].\n\n/**********************************************************************************\nВ первых четырех строках вводятся переменные параметры, являющиеся характеристиками \nравномерного движения, которые связываются уравнениями равномерного движения.\nДалее вводятся два внешних к этой онтологии шаблона, использование которых в других \nонтологиях позволяет создавать в них экземпляры объектов равномерного движения, \nобладающих характеристиками равномерного движения, связанными уравнениями \nравномерного движения. \n\nЭта онтология используется в задачах на равномерное движение.\n************************************************************************************/.")
name_file("Задача 1","99593507","20245755","Пешеход равномерно движется со скоростью 5. Пешеход's\nвремя =2.\nВелосипедист равномерно движется со скоростью 6*пешеход's\nскорость. Велосипедист's время = 3*пешеход's время.\n\n/*Чему равно велосипедист's путь?*/.\n\n/***************************************************************************\nПо тексту задачи система строит внутреннее представление онтологии задачи.\nЗаметим, что в тексте задачи используется шаблон языковой конструкции, \nвведенный в онтологии \"равномерное движение\".\nВ ответ на представленный здесь вопрос система ответит:\n\"Вопрос: Чему равно велосипедист's путь?\nОтвет: 180.\"\n*****************************************************************************/.")
name_file("Примеры онтологией с рекурсией","86586459","85329563","/* Эта онтология является средой для онтологий раздела\n\"Примеры онтологий с рекурсией\"\n\nВ разделе определяется онтологии \"Фактриал\" и \"Сумма списка\",\nв которых вводятся шаблоны для соответствующих функций определяется\nрекурсивное вычисление этих функций. */.")
name_file("Факториал","90884258","86586459","/*В этом примере определяется рекурсивно функция n!.\nДля этого вводится шаблон \"fact(@n,@i,@y)\" локальной функции, \nрекурсивно накапливающей результат. Далее вводится внешний шаблон \"@n!\", \nдействие которого определяется через ранее определенную локальную функцию fact(n,i,y).*/.\n\nВведем шаблон \"fact(@n,@i,@y)\"\nс переменными:\n\"n,i,y :real_выражение\"\nи переменной результата \" z:real_выражение \" ;\nПояснения: [Вычисляет факториал]\nУсловие применения шаблона:\n[]\nДействие шаблона:\n[\nif n==i then z=y else z=fact(n,i+1,(y)*(i+1))\n]\nТип доступа шаблона:[локальный].\n\nВведем шаблон \"@n!\"\nс переменными:\n\"n :real\"\nи переменной результата \" z:real \" ;\nПояснения: [Вычисляет факториал]\nУсловие применения шаблона:\n[]\nДействие шаблона:\n[\nz=fact(n,1,1)\n]\nТип доступа шаблона:[внешний].\n\n/*Примеры вопросов к онтологии:\n\"Вопрос: 5! ?\"\nОтвет: 120\";\n\n\"Вопрос: 132! ?\"\nОтвет: 1.118248651E+224\".\n*/.\n\n/* Так как данное вычисление факториала производится в машинных числаж,\nто возможно переполнение для 171! */.\n\n/************************************************************************************** \nЗаметим, что так как эта онтология разработана в среде \"Примеры онтологий с рекурсией\", \nи шаблон \"@n!\" был определен как внешний, то этот шаблон будет видим из любой онтологии \n(если он в этой онтологии не удален), разработанной в среде онтологии \"Примеры онтологий \nс рекурсией\"  и, следовательно, в этих онтологиях факториал может быть вычислен. \n****************************************************************************************/.")
name_file("Сумма списка","54432077","86586459","Введем шаблон \"Sum(@lst)\" \nс переменными:\n\"lst : список\"\nи переменной результата \" z: real \" ;\nПояснения: [Сумма списка арифметических выражений]\nУсловие применения шаблона:\n[]\nДействие шаблона:\n[\nif First_list(lst)==Nil then z=Second(lst) else z=Sum(First_list(lst))+(Second(lst))\n]\nТип доступа шаблона:[внешний].\n\n/* Пример вопросов:  \nSum(1,2,3,4,5)? \nSum(2*3,4/2, 5^2)?\n5!?\n(3+2)!?\nSum(1,2,3,4,5)!? \nSum(1,2!,3!)?\n*/.")
name_file("Нов2","7921245","85329563","/*********************************/.")
name_file("Пример для удаления","42587391","85329563","/******************************/.")
name_file("Среда для группы пример","28486065","1","/* Эта онтология будет средой для группы онтологий ПРИМЕР.*/.")
name_file("Среда группы П","43055565","1","/**** Эта онтология будет средой для группы онтологий ПРИМЕР.****/.")
name_file("Пример БД  учебного процесса","54139642","1","сотрудник, профессор, доцент, лаборант - области.\n\nпрофессор < сотрудник.\nдоцент < сотрудник.\nлаборант < сотрудник.\n\nСвойства сотрудник: фамилия, пол, \"год рождения\", \"год поступления на работу\" .\nсотрудник < фамилия.\n\nфамилия of сотрудник = вложение сотрудник в фамилия.\n\nЦаленко, Иванов - элементы области профессор.\nГаннушкина, Вайнтроб - элементы области доцент.\n\nпол of сотрудник (Цаленко) = \"мужской\".\nпол of сотрудник (Иванов) = мужской.\nпол of сотрудник (Вайнтроб) = мужской.\nпол of сотрудник (Ганнушкина) = \"женский\".\n\nгод рождения of сотрудник (Цаленко) = \"1938 г.\".\nгод рождения of сотрудник (Ганнушкина) = \"1942 г.\".\n\nгод поступления на работу of сотрудник (Цаленко) = \"1988 г.\".\nгод поступления на работу of сотрудник (Ганнушкина) = \"1980 г.\".\n\nфамилия of сотрудник (Цаленко) = Цаленко.\nфамилия of сотрудник (Иванов) = Иванов.\nфамилия of сотрудник (Вайнтроб) = Вайнтроб.\nфамилия of сотрудник (Ганнушкина) = Ганнушкина.\n\n/*Таблица свойств фамилия, пол, год рождения для сотрудник*/\n/*Select фамилия, пол, год рождения, год поступления на работу  from сотрудник*/.")
name_file("Среда примера","1295699","1","/**** Эта онтология будет средой для группы онтологий ПРИМЕР.****/.")
name_file("Пример онтологии1","28496219","85329563","/* Онтология создана для проверки видимости черновика онтологии незарегистрированным пользователем. */.")
use(0,37607466,85329563)
use(0,29377632,37607466)
use(0,85741444,37607466)
use(0,85741444,29377632)
use(0,29742761,37607466)
use(0,29742761,85741444)
use(0,99031673,85329563)
use(0,12749377,99031673)
use(0,96695630,99031673)
use(0,20245755,85329563)
use(0,35825708,20245755)
use(0,99593507,20245755)
use(0,99593507,35825708)
use(0,86586459,85329563)
use(0,90884258,86586459)
use(0,54432077,86586459)
use(0,7921245,85329563)
use(0,42587391,85329563)
use(0,28496219,85329563)
